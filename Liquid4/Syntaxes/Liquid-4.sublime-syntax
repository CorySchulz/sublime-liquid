%YAML 1.2
---
name: Liquid 4
file_extensions:
  - liquid
scope: text.html.liquid

variables:
  identifier: '[a-zA-Z_][a-zA-Z0-9_]*'
  filter_name: '[a-z][a-z0-9_-]*'
  quoted_string: '(?:"[^"]*"|''[^'']*'')'
  number: '-?\d+(?:\.\d+)?'
first_line_match: '^[^\n]{0,3}[^\S\n]*{[{%]-?'

contexts:
  main:
    - match: '^---$'
      scope: frontmatter.jekyll punctuation.section.frontmatter.begin.jekyll
      embed: scope:source.yaml
      embed_scope: frontmatter.jekyll
      escape: '^---$'
      escape_captures:
        0: frontmatter.jekyll punctuation.section.frontmatter.end.jekyll

    - match: '{%-?\s*comment\s*-?%}'
      scope: punctuation.definition.comment.begin.liquid
      push:
        - meta_scope: comment.block.liquid
        - match: '{%-?\s*endcomment\s*-?%}'
          scope: punctuation.definition.comment.end.liquid
          pop: true

    - match: '({%-?)\s*(schema)\s*(-?%})'
      captures:
        0: meta.tag.liquid
        1: punctuation.definition.tag.begin
        2: keyword.control.liquid
        3: punctuation.definition.tag.end
      embed: scope:source.json
      embed_scope: markup.json.schema.liquid
      escape: '({%-?)\s*(endschema)\s*(-?%})'
      escape_captures:
        0: meta.tag.liquid
        1: punctuation.definition.tag.begin
        2: keyword.control.liquid
        3: punctuation.definition.tag.end

    - match: '{{'
      scope: punctuation.definition.object.begin.liquid
      push: liquid_object
      
    - match: '{%-?\s*(liquid)\s*-?%}'
      scope: punctuation.definition.tag.begin.liquid meta.tag.liquid keyword.control.liquid
      push: multi_line_liquid

    - match: '{%-?'
      scope: punctuation.definition.tag.begin.liquid
      push: liquid_tag

    - match: ''
      push: html

  html:
    - meta_content_scope: text.html.basic
    - match: '(?={{|{%)'
      pop: true
    - include: scope:text.html.basic

  liquid_object:
    - meta_scope: meta.object.liquid
    - match: '}}'
      scope: punctuation.definition.object.end.liquid
      pop: true
    - include: strings
    - include: pipe
    - include: colon
    - include: vars

  liquid_tag:
    - meta_scope: meta.tag.liquid
    - match: '-?%}'
      scope: punctuation.definition.tag.end.liquid
      pop: true
    - include: tag_keywords
    - include: liquid_object

  multi_line_liquid:
    - meta_content_scope: meta.tag.liquid
    - match: '{%-?\s*endliquid\s*-?%}'
      scope: punctuation.definition.tag.end.liquid meta.tag.liquid keyword.control.liquid
      pop: true
    - match: ^\s*
      push: liquid_statement
      
  liquid_statement:
    - match: $\n?
      pop: true
    - include: tag_keywords
    - include: liquid_object

  tag_keywords:
    - match: '\b(if|else|elsif|endif|for|endfor|unless|endunless|case|when|endcase)\b'
      scope: keyword.control.flow.liquid
    - match: '(!=|==|<=|>=|<|>)'
      scope: keyword.operator.logical.liquid
    - match: '\b(and|or|not|contains|in|by|offset)\b'
      scope: keyword.operator.liquid
    - match: '\b(render|schema|endschema|include|endcapture|capture|assign)\b'
      scope: keyword.control.liquid
    - match: '='
      scope: keyword.operator.assignment.liquid
    - match: '\b(blank|empty|true|false|nil)\b'
      scope: constant.language.liquid

  strings:
    - match: "'"
      scope: punctuation.definition.string.begin.liquid
      push:
        - meta_scope: string.quoted.single.liquid
        - match: "(')|(\n)"
          captures:
            1: punctuation.definition.string.end.liquid
            2: invalid.illegal.newline.liquid
          pop: true
    - match: '"'
      scope: punctuation.definition.string.begin.liquid
      push:
        - meta_scope: string.quoted.double.liquid
        - match: '(")|(\n)'
          captures:
            1: punctuation.definition.string.end.liquid
            2: invalid.illegal.newline.liquid
          pop: true

  vars:
    - match: '\b({{identifier}})\b'
      scope: variable.other.liquid
    - match: '{{number}}'
      scope: constant.numeric.liquid
    - match: '\.'
      scope: punctuation.separator.liquid
    - match: '\['
      push: array_access
      
  array_access:
    - meta_scope: meta.brackets.liquid
    - match: '\]'
      pop: true
    - include: liquid_object

  colon:
    - match: '\:'
      scope: punctuation.separator.key-value.liquid

  pipe:
    - match: '\s(\|)\s({{filter_name}})\s*(:)?'
      captures:
        1: keyword.operator.logical.pipe.liquid
        2: support.function.filter.liquid
        3: punctuation.separator.key-value.liquid
      push: 
        - match: '\s*(?=\||}}|-?%})'
          pop: true
        - include: filter_args

  filter_args:
    - match: ',\s*'
      scope: punctuation.separator.comma.liquid
    - match: '{{quoted_string}}'
      scope: string.quoted.liquid
    - match: '{{number}}'
      scope: constant.numeric.liquid
    - match: '\b(true|false)\b'
      scope: constant.language.liquid
    - match: '{{identifier}}'
      scope: variable.other.liquid